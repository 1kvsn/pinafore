const timestamp = '__timestamp__'
const ASSETS = `assets_${timestamp}`
const ON_DEMAND = `ondemand_${timestamp}`

// `assets` is an array of everything in the `assets` directory
const assets = __assets__
  .map(file => file.startsWith('/') ? file : `/${file}`)
  .filter(filename => !filename.startsWith('/apple-icon'))

// `shell` is an array of all the files generated by webpack
// also contains '/index.html' for some reason
const resources = __shell__
  .filter(filename => !filename.endsWith('.map'))

const toCache = [].concat(assets).concat(resources)
const cacheSet = new Set(toCache)

// `routes` is an array of `{ pattern: RegExp }` objects that
// match the pages in your app
const routes = __routes__

self.addEventListener('install', event => {
  event.waitUntil((async () => {
    let cache = await caches.open(ASSETS)
    await cache.addAll(toCache)
    self.skipWaiting()
  })())
})

self.addEventListener('activate', event => {
  event.waitUntil((async () => {
    let keys = await caches.keys()

    // delete old asset/ondemand caches
    for (let key of keys) {
      if (key !== ASSETS && key !== ON_DEMAND) {
        await caches.delete(key)
      }
    }

    await self.clients.claim()
  })())
})

const ON_DEMAND_PATHS = [
  '/system/accounts/avatars'
]

self.addEventListener('fetch', event => {
  const req = event.request
  const url = new URL(req.url)

  // don't try to handle e.g. data: URIs
  if (!url.protocol.startsWith('http')) {
    return
  }

  event.respondWith((async () => {
    let sameOrigin = url.origin === self.origin

    // always serve webpack-generated resources and
    // assets from the cache
    if (sameOrigin && cacheSet.has(url.pathname)) {
      return caches.match(req)
    }

    // for routes, serve the /index.html file from the most recent
    // assets cache
    if (sameOrigin && routes.find(route => route.pattern.test(url.pathname))) {
      return caches.match('/index.html')
    }

    // For these GET requests, go cache-first
    if (req.method === 'GET' &&
        ON_DEMAND_PATHS.some(pattern => url.pathname.startsWith(pattern))) {
      let cache = await caches.open(ON_DEMAND)
      let response = await cache.match(req)
      if (response) {
        // update asynchronously
        fetch(req).then(response => {
          cache.put(req, response.clone())
        })
        return response
      }
      response = await fetch(req)
      cache.put(req, response.clone())
      return response
    }

    // for everything else, go network-only
    return fetch(req)
  })())
})
